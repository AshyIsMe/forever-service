
#!/bin/bash
#
#	/etc/rc.d/init.d/{{service}}
#
#	{{service}} - Provisioned using forever-service
#	
#
# chkconfig: 2345 80 20
# description: forever-service startup script for node script based service {{service}}, uses forever to start the service
# 


# Check if any of $pid (could be plural) are running
PIDFILE="/var/run/{{service}}.pid"
LOGFILE="/var/log/{{service}}.log"
LOCKFILE="/var/lock/subsys/{{service}}"

# introduce some gaps between restarts and throttle continous restarts
MIN_UPTIME="{{minUptime|default('5000')}}"
SPIN_SLEEP_TIME="{{spinSleepTime|default('2000')}}"

# kill signal: Since default needs to be SIGTERM, it is important that services gracefully shutdown,
# specially if they are doing transactions or other work which should not be interuppted in between
# for exceptional situation where you dont care about abrupt shutdown, SIGKILL should be used
KILL_SIGNAL="{{killSignal|default('SIGTERM')}}"

# Wait time afer with SIGKILL will be sent to the process, in case SIGTERM is not fully finished
# This is required since when we use SIGTERM, some times if there is problem in code, it might take lot of time for process to exit
# or process may never exit, in such siutation we have to forcebly kill it so that shutdown or service restart can be done appropriately
# this wait time is in millisecond
KILLWAITTIME={{forceKillWaitTime|default('5000')}}

killtree() {
    local _pid=$1
    local _sig=${2:--TERM}
    kill -stop ${_pid} # needed to stop quickly forking parent from producing children between child killing and parent killing
    for _child in $(ps -o pid --no-headers --ppid ${_pid}); do
        killtree ${_child} ${_sig}
    done
    kill -${_sig} ${_pid}
}

checkpidexists() {
	[ -d "/proc/$1" ] && return 0
	return 1
}



start() {
	echo  "Starting {{service}}"

	# move to the directory from where the inital forever script was launched so that even if it is relative it works as expected
	cd {{cwd}}

	forever \
	--pidFile $PIDFILE \
	-a \
	-l $LOGFILE \
	--minUptime $MIN_UPTIME \
	--spinSleepTime $SPIN_SLEEP_TIME \
	--killSignal $KILL_SIGNAL \
	{{foreverOptions|default('')}} \
	--uid {{service}} \
	start {{script|default('app.js')}} 2>&1 >/dev/null &
	RETVAL=$?

 	[ $RETVAL = 0 ] && touch $LOCKFILE
 	return $RETVAL
}	

stop() {
	echo -n "Shutting down {{service}}: "

	if ! [ -f $PIDFILE ]; then
		echo "Not running"
		return 0
	fi

	PID=$(<$PIDFILE)

	forever stop {{service}} 2>&1 >/dev/null

	CURRENTWAITTIME=$KILLWAITTIME
	# wait for some time before forcefully killing the process
	while [ $CURRENTWAITTIME -gt 0 ]; do
		#check if the process is still running
		checkpidexists $PID
		if [ $? -ne 0 ]; then
			# if not running we can break, since no more wait is needed, service is stopped
			echo "Successful"
			break
		fi
	 	usleep 500000
	 	let CURRENTWAITTIME-=500
	done
	checkpidexists $PID
	if [  $? -eq 0  ]; then
		killtree $PID 9
		echo 'Forced shutdown'
	fi

	rm -f $PIDFILE 2>&1 >/dev/null
	rm -f $LOCKFILE 2>&1 >/dev/null
	return 0

}

status() {
	STATUS=$(forever --plain list | sed 's/data:\(\s*\[[0-9]*\]\s*\({{service}}\).*\)/\2-status:\1/;tx;d;:x')
	if [ -z "$STATUS" ]; then
		echo "{{service}} is not running"
		RETVAL=3
	else		
		echo $STATUS
		RETVAL=0
	fi
	return $RETVAL
}

case "$1" in
    start)
	start
	;;
    stop)
	stop
	;;
    status)
	status
	;;
    restart)
    	stop
	start
	;;
    *)
	echo "Usage: <servicename> {start|stop|status|restart}"
	exit 1
	;;
esac
exit $?
